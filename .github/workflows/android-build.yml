name: Android Benchmark Build & Release

on:
  push:
    branches:
      - test
    tags:
      - 'v*'

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build APK
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-release: ${{ steps.check-release.outputs.is-release }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if this is a release
        id: check-release
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
          else
            echo "is-release=false" >> $GITHUB_OUTPUT
          fi

      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            version="${{ github.ref_name }}"
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "version=test-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Build Benchmark Release APK
        run: |
          echo "Building benchmarkRelease APK..."
          ./gradlew :app:assembleBenchmarkRelease

      - name: Rename APK with version
        run: |
          APK_FILE=$(find app/build/outputs/apk/benchmarkRelease -name "*.apk" | head -1)
          if [ -z "$APK_FILE" ]; then
            echo "Error: No APK file found"
            exit 1
          fi
          
          APK_DIR=$(dirname "$APK_FILE")
          VERSION="${{ steps.get-version.outputs.version }}"
          
          NEW_NAME="ClipSync-Android-${VERSION}.apk" 
          
          mv "$APK_FILE" "$APK_DIR/$NEW_NAME"
          echo "APK renamed to: $NEW_NAME"
          echo "apk-path=$APK_DIR/$NEW_NAME" >> $GITHUB_OUTPUT
        id: rename-apk

      - name: Get APK info
        run: |
          APK_FILE=$(find app/build/outputs/apk/benchmarkRelease -name "*.apk" | head -1)
          if [ -n "$APK_FILE" ]; then
            echo "APK Size: $(du -h "$APK_FILE" | cut -f1)"
            echo "APK Path: $APK_FILE"
          
            # Get APK details using aapt if available
            if command -v aapt >/dev/null 2>&1; then
              echo "APK Package Info:"
              aapt dump badging "$APK_FILE" | grep -E "package:|application-label:|platformBuildVersionName"
            fi
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: clipsync-android-${{ steps.get-version.outputs.version }}
          path: app/build/outputs/apk/benchmarkRelease/*.apk
          retention-days: ${{ steps.check-release.outputs.is-release == 'true' && 90 || 30 }}

  test-release:
    needs: build
    if: github.ref == 'refs/heads/test'
    runs-on: ubuntu-latest
    name: Test Release Upload

    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: clipsync-android-${{ needs.build.outputs.version }}
          path: ./apk/

      - name: List test artifacts
        run: |
          echo "Test build artifacts:"
          find ./apk -name "*.apk" -exec ls -lh {} \;

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    name: Create GitHub Release

    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: clipsync-android-${{ needs.build.outputs.version }}
          path: ./apk/

      - name: Verify release artifacts
        run: |
          echo "Release artifacts:"
          find ./apk -name "*.apk" -exec ls -lh {} \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ClipSync Android ${{ needs.build.outputs.version }}
          body: |
            
            [Full Changelog](https://github.com/aubynsamuel/clipsync-android/compare/v1.0.0...v1.1.0)

          files: ./apk/*.apk
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}